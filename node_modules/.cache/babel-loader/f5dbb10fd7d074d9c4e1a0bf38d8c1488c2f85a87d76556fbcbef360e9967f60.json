{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport additionalMiddleware from \"additional-middleware\";\nimport logger from \"redux-logger\";\nimport untypedMiddleware from \"untyped-middleware\";\nimport { useDispatch } from \"react-redux\";\nimport rootReducer from \"./root-reducer\";\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(\n  // correctly typed middlewares can just be used\n  additionalMiddleware,\n  // you can also type middlewares manually\n  untypedMiddleware)\n  // prepend and concat calls can be chained\n  .concat(logger)\n});\nexport const useAppDispatch = useDispatch;\nexport default store;","map":{"version":3,"names":["configureStore","additionalMiddleware","logger","untypedMiddleware","useDispatch","rootReducer","store","reducer","middleware","getDefaultMiddleware","prepend","concat","useAppDispatch"],"sources":["/Volumes/DATA/Web Dev/React/user-app/src/redux/store.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport additionalMiddleware from \"additional-middleware\";\nimport logger from \"redux-logger\";\nimport untypedMiddleware from \"untyped-middleware\";\nimport { useDispatch } from \"react-redux\";\nimport rootReducer from \"./root-reducer\";\n\nexport type RootState = ReturnType<typeof rootReducer>\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware()\n            .prepend(\n            // correctly typed middlewares can just be used\n            additionalMiddleware,\n            // you can also type middlewares manually\n            untypedMiddleware as Middleware<\n                (action: Action<'specialAction'>) => number,\n                RootState\n            >\n            )\n            // prepend and concat calls can be chained\n            .concat(logger),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport default store;"],"mappings":"AAAA,SAASA,cAAc,QAA8B,kBAAkB;AACvE,OAAOC,oBAAoB,MAAM,uBAAuB;AACxD,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,iBAAiB,MAAM,oBAAoB;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,WAAW,MAAM,gBAAgB;AAGxC,MAAMC,KAAK,GAAGN,cAAc,CAAC;EACzBO,OAAO,EAAEF,WAAW;EACpBG,UAAU,EAAGC,oBAAoB,IAC7BA,oBAAoB,EAAE,CACjBC,OAAO;EACR;EACAT,oBAAoB;EACpB;EACAE,iBAAiB;EAKjB;EAAA,CACCQ,MAAM,CAACT,MAAM;AAC1B,CAAC,CAAC;AAGF,OAAO,MAAMU,cAAiC,GAAGR,WAAW;AAE5D,eAAeE,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}